int RESERVED 1 1
gcd IDF 1 5
( SOP 1 9
int RESERVED 1 10
u ID 1 14
, SOP 1 15
int RESERVED 1 17
v ID 1 21
) SOP 1 22
{ SOP 2 1
if RESERVED 2 3
( SOP 2 6
v ID 2 7
== COP 2 9
0 NUM 2 12
) SOP 2 13
return RESERVED 2 15
u ID 2 22
; EOP 2 24
else RESERVED 3 1
return RESERVED 3 6
gcd IDF 3 13
( SOP 3 16
v ID 3 17
, SOP 3 18
u ID 3 19
- OOP 3 20
u ID 3 21
/ OOP 3 22
v ID 3 23
* OOP 3 24
v ID 3 25
) SOP 3 26
; EOP 3 27
} SOP 4 1
void RESERVED 5 1
main IDF 5 6
( SOP 5 10
void RESERVED 5 11
) SOP 5 15
{ SOP 6 1
int RESERVED 6 3
x ID 6 7
[ SOP 6 8
3 NUM 6 9
] SOP 6 10
; EOP 6 11
char RESERVED 7 1
z ID 7 6
[ SOP 7 7
2 NUM 7 8
] SOP 7 9
; EOP 7 10
char RESERVED 8 1
ch ID 8 6
[ SOP 8 8
2 NUM 8 9
] SOP 8 10
; EOP 8 11
int RESERVED 9 1
i ID 9 5
; EOP 9 6
int RESERVED 10 1
y ID 10 5
[ SOP 10 6
3 NUM 10 7
] SOP 10 8
; EOP 10 9
int RESERVED 11 1
j ID 11 5
; EOP 11 6
i ID1 12 1
= AOP 12 3
0 NUM 12 5
; EOP 12 6
ch ID1 13 1
= AOP 13 4
z ID 13 6
[ SOP 13 7
0 NUM 13 8
] SOP 13 9
+ OOP 13 11
z ID 13 13
[ SOP 13 14
1 NUM 13 15
] SOP 13 16
; EOP 13 17
while RESERVED 14 1
( SOP 14 6
i ID 14 7
<= COP 14 9
1 NUM 14 12
) SOP 14 13
{ SOP 14 14
x ID1 15 1
[ SOP 15 2
i ID 15 3
] SOP 15 4
= AOP 15 6
input IDF 15 8
( SOP 15 13
) SOP 15 14
; EOP 15 15
x ID1 15 16
[ SOP 15 17
i ID 15 18
+ OOP 15 20
1 NUM 15 22
] SOP 15 23
= AOP 15 25
input IDF 15 27
( SOP 15 32
) SOP 15 33
; EOP 15 34
output IDF 16 1
( SOP 16 8
gcd IDF 16 10
( SOP 16 14
x ID 16 16
[ SOP 16 17
i ID 16 18
] SOP 16 19
, SOP 16 21
x ID 16 23
[ SOP 16 24
i ID 16 25
+ OOP 16 27
1 NUM 16 29
] SOP 16 30
) SOP 16 32
) SOP 16 34
; EOP 16 36
i ID1 17 1
= AOP 17 3
i ID 17 5
+ OOP 17 7
1 NUM 17 9
; EOP 17 10
} SOP 18 1
j ID1 19 1
= AOP 19 3
1 NUM 19 5
; EOP 19 6
y ID1 20 1
[ SOP 20 2
0 NUM 20 3
] SOP 20 4
= AOP 20 6
input IDF 20 8
( SOP 20 13
) SOP 20 14
; EOP 20 15
while RESERVED 21 1
( SOP 21 6
j ID 21 7
<= COP 21 9
2 NUM 21 12
) SOP 21 13
{ SOP 21 14
y ID1 22 1
[ SOP 22 2
j ID 22 3
] SOP 22 4
= AOP 22 6
input IDF 22 8
( SOP 22 13
) SOP 22 14
; EOP 22 15
y ID1 23 1
[ SOP 23 2
j ID 23 3
] SOP 23 4
= AOP 23 6
y ID 23 8
[ SOP 23 9
j ID 23 10
- OOP 23 12
1 NUM 23 14
] SOP 23 15
+ OOP 23 17
y ID 23 19
[ SOP 23 20
j ID 23 21
] SOP 23 22
; EOP 23 23
j ID1 24 1
= AOP 24 3
j ID 24 5
+ OOP 24 7
1 NUM 24 9
; EOP 24 10
} SOP 25 1
output IDF 26 1
( SOP 26 7
y ID 26 9
[ SOP 26 10
2 NUM 26 11
] SOP 26 12
) SOP 26 14
; EOP 26 15
} SOP 27 1
# # 28 1
